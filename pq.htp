#if !defined(_PQ_)
#  define _PQ_

class model_data : public ad_comm{
  int nf;
  data_int n;
  data_int A;
  data_number rbar;
  data_vector yObs;
  data_int debug;
  data_int eof;
  dvector age;
  dvector xi;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number log_Z;
  param_init_bounded_number beta1;
  param_init_bounded_number alpha;
  param_init_bounded_number qtil;
  param_init_bounded_number b;
  param_init_bounded_number N;
  param_number a;
  param_number Z;
  param_vector Si;
  param_vector Betai;
  param_vector Ri;
  param_vector pvec;
  param_vector qvec;
  param_vector pPrime;
  param_vector log_resid;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void calcObjectiveFunction(void);
 void getpPrime();
 void getPi();
 void getQi();
 dvar_vector p2q(const dvar_vector pp,const dvariable aa, const dvariable bb);
 dvector p2q(const dvector pp,const double aa, const double bb);
 dvar_vector q2p(const dvar_vector qq,const double aa, const double bb);
 dvector q2p(const dvector qq,const double aa, const double bb);
 double logit(const double p);
 dvariable logit(const dvariable p);
 dvector logit(const dvector p);
 dvar_vector logit(const dvar_vector p);
 double invlogit(const double x);
 dvariable invlogit(const dvariable x);
 dvector invlogit(const dvector x);
 dvar_vector invlogit(const dvar_vector x);

};
#endif
